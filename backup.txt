import scipy
from scipy import misc
import glob
import numpy as np
from scipy import signal

bigarray = []
for infile in (glob.glob('/home/max/AY250HW/HW1/Data/*')):
    f = misc.imread(infile)
    bigarray.append(f)

bigarray = np.asarray(bigarray)
biggerarray = np.empty([len(bigarray[0:,0,0,1]),3*len(bigarray[0,0:,0,1]),3*len(bigarray[0,0:,0,1])])

for i in range(len(bigarray[0:,0,0,1])):
    biggerarraybit = misc.imresize(bigarray[i,0:,0:,1], [3*len(bigarray[0,0:,0,1]), 3*len(bigarray[0,0,0:,1])])
    biggerarray[i,0:,0:] = biggerarraybit

biggerarrayclean = biggerarray[0:,148:716, 0:]

biggerarraystart = misc.imresize(bigarray[0,0:,0:,1], [3*len(bigarray[0,0:,0,1]), 3*len(bigarray[0,0,0:,1])])
bigarraystart = biggerarraystart[148:716, 0:]
bigarraystart = bigarraystart - np.mean(bigarraystart)

maxfftshift = np.zeros([len(bigarray[0:,0,0,1]), 2])
               
for i in range(len(bigarray[0:,0,0,0])):
    bigarrayathand = biggerarrayclean[i,0:,0:] - np.mean(biggerarrayclean[i,0:,0:])
    c = signal.fftconvolve(bigarraystart, bigarrayathand[::-1,::-1], mode = 'same')
    maxloc = np.unravel_index(np.argmax(c), c.shape)
    maxfftshift[i,0:] = maxloc
    
maxfftshift = np.asarray(maxfftshift)
maxshiftabs = maxfftshift - maxfftshift[0,0:] 
# why aren't these numbers right?????????

shifted = np.ones_like(biggerarrayclean)

for i in range(len(bigarray[0:,0,0,1])):
    shifted[i,0:,0:] = scipy.ndimage.interpolation.shift(biggerarrayclean[i,0:,0:], maxshiftabs[i,0:])

def Audio(fname):
    """Provide a player widget for an audio file.
    
    Parameters
    ==========
    fname : string
      Filename to be played.
      
    Warning
    =======
    
    Browsers cache audio very aggressively. If you change an
    audio file on disk and are trying to listen to the  new version, you 
    may want to 
    """
    from IPython.display import HTML, display
    
    # Find out file extension and deduce MIME type for audio format
    ext = os.path.splitext(fname)[1].replace('.', '').lower()
    mimetype = 'audio/' + ('mpeg' if ext == 'mp3' else ext)
    
    tpl = """<p>{fname}:</p>
<audio controls>
    <source src="files/{fname}" type="{mimetype}">

Your browser does not support the Audio element; you can play 
<a href="files/{fname}">this file</a> manually.
</audio>
"""
    display(HTML(tpl.format(**locals())))


def specgram_cbar(x, title=None, clim=(0, 80) ):
    """Plot spectrogram with a colorbar and range normalization.
    
    Call matplotlib's specgram function, with a custom figure size, 
    automatic colobar, title and custom color limits to ease 
    comparison across multiple figures.
    
    Parameters
    ==========
    x : array
      One-dimensional array whose spectrogram should be plotted.
      
    title : string
      Optional title for the figure.
      
    clim : 2-tuple
      Range for the color limits plotted in the spectrogram.
    """
    f = plt.figure(figsize=(10,3))
    plt.specgram(x)
    plt.colorbar()
    plt.clim(*clim)
    if title is not None:
        plt.title(title)
    plt.show()
    
    
def compress_signal(x, fraction):
    """Compress an input signal by dropping a fraction of its spectrum.
    
    Parameters
    ==========
    x : array
      1-d real array to be compressed
      
    fraction : float
      A number in the [0,1] range indicating which fraction of the spectrum
      of x should be zeroed out (1 means zero out the entire signal).
      
    Returns
    =======
    x_approx : array
      1-d real array reconstructed after having compressed the input.
    """
    compressedx = np.copy(x)
    compressedx[np.where(x < (fraction/.5)*np.mean(x))]= 0 
    
    return compressedx    



def compress_wav(fname, fraction):
    """Compress an audio signal stored in an input wav file.
    
    The compressed signal is returned as a numpy array and automatically written 
    to disk to a new wav file.
    
    Parameters
    ==========
    fname : string
      Name of the input wav file
      
    fraction : float
      Fraction of input data to keep.
      
    Returns
    =======
    rate : int
      Bit rate of the input signal.

    x : array
      Raw data of the original input signal.
      
    x_approx : array
      Raw data of the compressed signal.
      
    new_fname : string
      Auto-generated filename of the compressed signal.
    """
    
    samplerate, tobecompressed = scipy.io.wavfile.read(fname)
    donezo = compress_signal(tobecompressed, fraction)
    
    return donezo, samplerate
    
    
from collections import OrderedDict

voices = OrderedDict([(.1,('Data/hw_1_test.wav', .1)),  
                      (.5, ('Data/hw_1_test.wav', .5)), 
                      (.75, ('Data/hw_1_test.wav', .75)), 
                      (.95, ('Data/hw_1_test.wav', .95)), 
                      (.99, ('Data/hw_1_test.wav', .99))])
                      


for i in voices:
    compressed, samplerate = compress_wav(voices[i][0], voices[i][1])
    scipy.io.wavfile.write('compressed %s.wav'%(voices[i][1]), samplerate, compressed)
    Audio('compressed %s.wav'%(voices[i][1]))
    specgram_cbar(compressed[0:,1], title = '%s compression'%(voices[i][1]))
    

